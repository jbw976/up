name: CI

on:
  push:
    branches:
      - main
      - release-*
    tags:
      - 'v*'
  pull_request: {}
  workflow_dispatch: {}
  merge_group:
    types: [checks_requested]

env:
  # Common versions
  GO_VERSION: '1.23'
  GOLANGCI_VERSION: 'v1.64.8'
  DOCKER_BUILDX_VERSION: 'v0.17.1'
  REGISTRY_ORGS: xpkg.upbound.io/upbound

  # Common users. We can't run a step 'if secrets.AWS_USR != ""' but we can run
  # a step 'if env.AWS_USR' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  DOCKER_USR: ${{ secrets.DOCKER_USR }}
  AWS_USR: ${{ secrets.AWS_USR }}
  XPKG_ACCESS_ID: ${{ secrets.XPKG_ACCESS_ID }}
  # NOTE(epk) this identifier is used to easily bust a pre-existing go
  # mod/build cache. To do so simply increment this number.
  GO_CACHE_BUSTER: 0

jobs:
  detect-noop:
    runs-on: ubuntu-24.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Cleanup Disk
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          tool-cache: true
          swap-storage: false
          large-packages: false
          docker-images: false

      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  lint:
    runs-on: ubuntu-24.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: true
          fetch-depth: 0

      # TODO(hasheddan): temporary to allow access to up-sdk-go
      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.UPBOUND_BOT_GITHUB_TOKEN }}:x-oauth-basic@github.com/upbound".insteadOf "https://github.com/upbound"

      - name: Setup Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      # We could run 'make lint' to ensure our desired Go version, but we prefer
      # this action because it leaves 'annotations' (i.e. it comments on PRs to
      # point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@55c2c1448f86e01eaae002a5a3a9624417608d84 # v6
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          skip-go-installation: true
          only-new-issues: true

  check-diff:
    runs-on: ubuntu-24.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: true

      # TODO(hasheddan): temporary to allow access to up-sdk-go
      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.UPBOUND_BOT_GITHUB_TOKEN }}:x-oauth-basic@github.com/upbound".insteadOf "https://github.com/upbound"

      - name: Setup Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Check Diff
        run: make check-diff

  unit-tests:
    runs-on: ubuntu-24.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: true

      # TODO(hasheddan): temporary to allow access to up-sdk-go
      - name: Granting private modules access
        run: |
          git config --global url."https://${{ secrets.UPBOUND_BOT_GITHUB_TOKEN }}:x-oauth-basic@github.com/upbound".insteadOf "https://github.com/upbound"

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Unit Tests
        run: |
          GO_TAGS="integration" make -j2 test

      - name: Publish Unit Test Coverage
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5
        with:
          flags: unittests
          file: _output/tests/linux_amd64/coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}

  publish-artifacts:
    runs-on: ubuntu-24.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Cleanup Disk
        uses: jlumbroso/free-disk-space@main
        with:
          android: true
          dotnet: true
          haskell: true
          tool-cache: true
          large-packages: false
          swap-storage: false
          docker-images: false

      - name: Setup QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
          RELEASE_TARGET: "release"

      - name: Publish Artifacts to GitHub
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: output
          path: _output/**

      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux AMD64 schema-generator
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/linux_amd64/schema-generator
          asset_name: schema-generator-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Linux ARM64 schema-generator
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/linux_arm64/schema-generator
          asset_name: schema-generator-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload Darwin AMD64 schema-generator
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/darwin_amd64/schema-generator
          asset_name: schema-generator-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Darwin ARM64 schema-generator
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/darwin_arm64/schema-generator
          asset_name: schema-generator-darwin-arm64
          asset_content_type: application/octet-stream

      - name: Upload Linux AMD64 up
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/linux_amd64/up
          asset_name: up-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Linux ARM64 up
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/linux_arm64/up
          asset_name: up-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload Darwin AMD64 up
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/darwin_amd64/up
          asset_name: up-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Darwin ARM64 up
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./_output/bin/darwin_arm64/up
          asset_name: up-darwin-arm64
          asset_content_type: application/octet-stream

      - name: Login to Docker
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        if: env.DOCKER_USR != ''
        with:
          username: ${{ secrets.DOCKER_USR }}
          password: ${{ secrets.DOCKER_PSW }}

      - name: Login to Upbound
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        if: env.XPKG_ACCESS_ID != ''
        with:
          registry: xpkg.upbound.io
          username: ${{ secrets.XPKG_ACCESS_ID }}
          password: ${{ secrets.XPKG_TOKEN }}

      - name: Publish Artifacts to S3 and Docker Hub
        run: make -j2 publish BRANCH_NAME=${GITHUB_REF##*/}
        if: env.AWS_USR != '' && env.DOCKER_USR != ''
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_USR }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PSW }}
          AWS_DEFAULT_REGION: us-east-1
          GIT_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote Artifacts in S3 and Docker Hub
        if: github.ref == 'refs/heads/main' && env.AWS_USR != '' && env.DOCKER_USR != ''
        run: make -j2 promote
        env:
          BRANCH_NAME: main
          CHANNEL: main
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_USR }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PSW }}
          AWS_DEFAULT_REGION: us-east-1

  e2e:
    runs-on: ubuntu-24.04
    needs: publish-artifacts
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: true

      - name: Download Artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
        with:
          name: output
          path: _output

      - name: Platform Architecture
        id: determine-platform
        run: |
          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64) ARCH="amd64" ;;
            aarch64) ARCH="arm64" ;;
            *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
          esac
          PLATFORM_ARCH="${PLATFORM}_${ARCH}"
          echo "PLATFORM_ARCH=${PLATFORM_ARCH}" >> $GITHUB_ENV

      - name: up
        run: |
          mkdir -p ~/up-cli-bin
          mv _output/bin/${{ env.PLATFORM_ARCH }}/up ~/up-cli-bin/
          chmod +x ~/up-cli-bin/up

      - name: up version
        run: |
          export PATH=~/up-cli-bin:$PATH
          up version

      - name: up login with robot
        run: |
          export PATH=~/up-cli-bin:$PATH
          up login -t ${{ secrets.UPBOUND_ROBOT_TOKEN }} --organization=upbound

      - name: up project init
        run: |
          export PATH=~/up-cli-bin:$PATH
          up project init e2e-test

      - name: assert project
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/upbound.yaml
          assert_file_path: e2e/project.yaml
          expected_result: PASSED

      - name: up project deps
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd e2e-test
          up dep add xpkg.upbound.io/upbound/provider-kubernetes

      - name: assert project with deps
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/upbound.yaml
          assert_file_path: e2e/project-with-dependencies.yaml
          expected_result: PASSED

      - name: up example generate
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd e2e-test
          up example generate \
            --type xr \
            --api-group acme.comp \
            --api-version v1beta1 \
            --kind XCluster \
            --name example

      - name: assert claim
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/examples/xcluster/example.yaml
          assert_file_path: e2e/example.yaml
          expected_result: PASSED

      - name: up xrd generate
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd e2e-test
          up xrd generate examples/xcluster/example.yaml

      - name: assert xrd
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/apis/xclusters/definition.yaml
          assert_file_path: e2e/definition.yaml
          expected_result: PASSED

      - name: up composition generate
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd e2e-test
          up composition generate examples/xcluster/example.yaml

      - name: assert composition
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/apis/xclusters/composition.yaml
          assert_file_path: e2e/composition.yaml
          expected_result: PASSED

      - name: assert project after composition generate
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/upbound.yaml
          assert_file_path: e2e/project-after-compositon-generate.yaml
          expected_result: PASSED

      - name: up function generate
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd e2e-test
          up function generate xcluster apis/xclusters/composition.yaml

      - name: assert composition with embedded function
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/apis/xclusters/composition.yaml
          assert_file_path: e2e/composition-with-embedded-function.yaml
          expected_result: PASSED

      - name: assert main.k from embedded function
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat e2e-test/functions/xcluster/main.k
          assert_file_path: e2e/main.k
          expected_result: PASSED

      - name: up project build
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd e2e-test
          up project build

      - name: assert uppkg exists
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: ls _output/e2e-test.uppkg
          contains: _output/e2e-test.uppkg
          expected_result: PASSED

      - name: Login to xpkg with robot
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: xpkg.upbound.io
          username: ${{ secrets.UPBOUND_ROBOT_ID }}
          password: ${{ secrets.UPBOUND_ROBOT_TOKEN }}

      - name: up project push
        run: |
          export PATH=~/up-cli-bin:$PATH
          eval $(make --no-print-directory build.vars)
          cd e2e-test
          up project push --tag=${VERSION}

  e2e-example-project-aws:
    runs-on: ubuntu-24.04
    needs: publish-artifacts
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          submodules: true

      - name: Download Artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
        with:
          name: output
          path: _output

      - name: Platform Architecture
        id: determine-platform
        run: |
          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64) ARCH="amd64" ;;
            aarch64) ARCH="arm64" ;;
            *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
          esac
          PLATFORM_ARCH="${PLATFORM}_${ARCH}"
          echo "PLATFORM_ARCH=${PLATFORM_ARCH}" >> $GITHUB_ENV

      - name: up
        run: |
          mkdir -p ~/up-cli-bin
          mv _output/bin/${{ env.PLATFORM_ARCH }}/up ~/up-cli-bin/
          chmod +x ~/up-cli-bin/up

      - name: up version
        run: |
          export PATH=~/up-cli-bin:$PATH
          up version

      - name: clone example-project-aws
        run: |
          export PATH=~/up-cli-bin:$PATH
          git clone https://github.com/upbound/example-project-aws

      - name: up build example-project-aws
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd example-project-aws
          up project build

      - name: up compositon render example-project-aws
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd example-project-aws
          up composition render apis/kcl/composition.yaml examples/kcl/example.yaml --xrd apis/xstoragebuckets/definition.yaml -q >> render-kcl.yaml
          up composition render apis/go/composition.yaml examples/go/example.yaml --xrd apis/xstoragebuckets/definition.yaml -q >> render-go.yaml
          up composition render apis/python/composition.yaml examples/python/example.yaml --xrd apis/xstoragebuckets/definition.yaml -q >> render-python.yaml

      - name: assert up composition render kcl
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat example-project-aws/render-kcl.yaml
          assert_file_path: e2e/render-kcl.yaml
          expected_result: PASSED

      - name: assert up composition render go
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat example-project-aws/render-go.yaml
          assert_file_path: e2e/render-go.yaml
          expected_result: PASSED

      - name: assert up composition render python
        uses: GuillaumeFalourd/assert-command-line-output@main
        with:
          command_line: cat example-project-aws/render-python.yaml
          assert_file_path: e2e/render-python.yaml
          expected_result: PASSED

      - name: up test run example-project-aws
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd example-project-aws
          up test run tests/*

      - name: up login with robot
        run: |
          export PATH=~/up-cli-bin:$PATH
          up login -t ${{ secrets.UPBOUND_ROBOT_TOKEN }} --organization=upbound

      - name: up ctx
        run: |
          export PATH=~/up-cli-bin:$PATH
          up ctx upbound/upbound-gcp-us-central-1/default

      - name: Login to xpkg with robot
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: xpkg.upbound.io
          username: ${{ secrets.UPBOUND_ROBOT_ID }}
          password: ${{ secrets.UPBOUND_ROBOT_TOKEN }}

      - name: up test run --e2e example-project-aws
        run: |
          export PATH=~/up-cli-bin:$PATH
          cd example-project-aws
          up test run tests/e2etest-storagebucket-kcl --e2e
