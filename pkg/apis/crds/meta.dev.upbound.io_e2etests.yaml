---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.5
  name: e2etests.meta.dev.upbound.io
spec:
  group: meta.dev.upbound.io
  names:
    categories:
    - meta
    kind: E2ETest
    listKind: E2ETestList
    plural: e2etests
    shortNames:
    - e2e
    singular: e2etest
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          E2ETest defines the schema for the E2ETest custom resource used for e2e
          testing of Crossplane configurations in controlplanes.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              E2ETestSpec defines the specification for e2e testing of Crossplane
              configurations. It orchestrates the complete test lifecycle including setting
              up controlplane, applying test resources in the correct order (InitResources
              → Configuration → ExtraResources → Manifests), validating conditions, and
              handling cleanup. This spec allows you to define e2e tests that verify your
              Crossplane compositions, providers, and managed resources work correctly
              together in a real controlplane environment.
            properties:
              crossplane:
                description: |-
                  Crossplane specifies the Crossplane configuration and settings required
                  for this test. This includes the version of Universal Crossplane to
                  install, and optional auto-upgrade settings. The configuration defined
                  here will be used to set up the controlplane before applying the test
                  manifests.
                properties:
                  autoUpgrade:
                    default:
                      channel: Stable
                    description: AutoUpgrades defines the auto upgrade configuration
                      for Crossplane.
                    properties:
                      channel:
                        default: Stable
                        description: |-
                          Channel defines the upgrade channels for Crossplane. We support the following channels where 'Stable' is the
                          default:
                          - None: disables auto-upgrades and keeps the control plane at its current version of Crossplane.
                          - Patch: automatically upgrades the control plane to the latest supported patch version when it
                            becomes available while keeping the minor version the same.
                          - Stable: automatically upgrades the control plane to the latest supported patch release on minor
                            version N-1, where N is the latest supported minor version.
                          - Rapid: automatically upgrades the cluster to the latest supported patch release on the latest
                            supported minor version.
                        enum:
                        - None
                        - Patch
                        - Stable
                        - Rapid
                        type: string
                    type: object
                  state:
                    default: Running
                    description: |-
                      State defines the state for crossplane and provider workloads. We support
                      the following states where 'Running' is the default:
                      - Running: Starts/Scales up all crossplane and provider workloads in the ControlPlane
                      - Paused: Pauses/Scales down all crossplane and provider workloads in the ControlPlane
                    enum:
                    - Running
                    - Paused
                    type: string
                  version:
                    description: Version is the version of Universal Crossplane to
                      install.
                    type: string
                    x-kubernetes-validations:
                    - message: The version must not start with a leading 'v'
                      rule: (self.matches('^[^v].*'))
                type: object
              defaultConditions:
                description: |-
                  DefaultConditions specifies the expected conditions that should be met
                  after the manifests are applied. These are validation checks that verify
                  the resources are functioning correctly. Each condition is a string
                  expression that will be evaluated against the deployed resources. Common
                  conditions include checking resource status for readiness
                items:
                  type: string
                minItems: 1
                type: array
              extraResources:
                description: |-
                  ExtraResources specifies additional Kubernetes resources that should be
                  created or updated after the configuration has been successfully applied.
                  These resources may depend on the primary configuration being in place.
                  Common use cases include ConfigMaps, Secrets, providerConfigs. Each
                  resource must be a valid Kubernetes object.
                items:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              initResources:
                description: |-
                  InitResources specifies Kubernetes resources that must be created or
                  updated before the configuration is applied. These are typically
                  prerequisite resources that the configuration depends on. Common use
                  cases include ImageConfigs, DeploymentRuntimeConfigs, or any foundational
                  resources required for the configuration to work. Each resource must be a
                  valid Kubernetes object.
                items:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              manifests:
                description: |-
                  Manifests contains the Kubernetes resources that will be applied as part
                  of this e2e test. These are the primary resources being tested - they
                  will be created in the controlplane and then validated against the
                  conditions specified in DefaultConditions. Each manifest must be a valid
                  Kubernetes object. At least one manifest is required. Examples include
                  Claims, Composite Resources or any Kubernetes resource you want to test.
                items:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                minItems: 1
                type: array
              skipDelete:
                description: If true, skip resource deletion after test
                type: boolean
              timeoutSeconds:
                description: |-
                  TimeoutSeconds defines the maximum duration in seconds that the test is
                  allowed to run before being marked as failed. This includes time for
                  resource creation, condition checks, and any reconciliation processes. If
                  not specified, a default timeout will be used. Consider setting higher
                  values for tests involving complex resources or those requiring multiple
                  reconciliation cycles.
                minimum: 1
                type: integer
            required:
            - crossplane
            - manifests
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
