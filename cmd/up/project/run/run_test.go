// Copyright 2025 Upbound Inc.
// All rights reserved

package run

import (
	"context"
	"embed"
	"maps"
	"net/url"
	"os"
	"slices"
	"strings"
	"testing"

	"github.com/google/go-containerregistry/pkg/name"
	"github.com/spf13/afero"
	"gotest.tools/v3/assert"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/client/fake"

	"github.com/crossplane/crossplane-runtime/pkg/errors"

	"github.com/upbound/up/internal/async"
	"github.com/upbound/up/internal/ctp"
	"github.com/upbound/up/internal/project"
	"github.com/upbound/up/internal/upbound"
	"github.com/upbound/up/internal/upterm"
	"github.com/upbound/up/internal/xpkg/dep/cache"
	"github.com/upbound/up/internal/xpkg/dep/manager"
	"github.com/upbound/up/internal/xpkg/dep/resolver/image"
	"github.com/upbound/up/internal/xpkg/functions"
	"github.com/upbound/up/internal/xpkg/schemarunner"
	"github.com/upbound/up/pkg/apis/project/v1alpha1"
)

var (
	//go:embed testdata/configuration-getting-started/**
	configurationGettingStarted embed.FS

	//go:embed testdata/packages/*
	packagesFS embed.FS
)

func TestRun(t *testing.T) {
	projFS := afero.NewBasePathFs(
		afero.FromIOFS{FS: configurationGettingStarted},
		"testdata/configuration-getting-started",
	)

	testPkgFS := afero.NewBasePathFs(afero.FromIOFS{FS: packagesFS}, "testdata/packages")

	r := image.NewResolver(
		image.WithFetcher(
			&image.FSFetcher{FS: testPkgFS},
		),
	)

	cch, err := cache.NewLocal("/cache", cache.WithFS(afero.NewMemMapFs()))
	assert.NilError(t, err)

	mgr, err := manager.New(
		manager.WithCache(cch),
		manager.WithResolver(r),
	)
	assert.NilError(t, err)

	mockRunner := mockSchemaRunner{}

	prj, err := project.Parse(projFS, "upbound.yaml")
	assert.NilError(t, err)
	prj.Default()

	// tag is the tag that will be generated by the pusher and installed in the control plane.
	tag, err := name.NewTag("example.com/test:latest")
	assert.NilError(t, err)
	// expectedTag is the tag that should be generated by the builder. We expect
	// it to be present in the image map that gets passed to the pusher.
	expectedTag, err := name.NewTag("xpkg.upbound.io/acmeco/configuration-getting-started:configuration")
	assert.NilError(t, err)

	cl := fake.NewFakeClient()
	mockCtp := ctp.NewMockDevControlPlane(cl, nil)

	c := &Cmd{
		Flags: Flags{
			ProjectFile:  "upbound.yaml",
			NoBuildCache: true,
		},
		NoUpdateKubeconfig: true,

		projFS:             projFS,
		functionIdentifier: functions.FakeIdentifier,
		schemaRunner:       mockRunner,
		concurrency:        1,
		asyncWrapper:       async.IgnoreEvents,
		pusher: &mockPusher{
			expectedTag: expectedTag,
			tag:         tag,
		},
		ensureDevControlPlane: func(_ context.Context, _ *upbound.Context, _ ...ctp.EnsureDevControlPlaneOption) (ctp.DevControlPlane, error) {
			return mockCtp, nil
		},
		installConfiguration: func(_ context.Context, _ client.Client, name string, tag name.Tag, _ async.EventChannel) error {
			assert.Equal(t, name, "configuration-getting-started")
			assert.Equal(t, tag.String(), "example.com/test:latest")
			return nil
		},

		m:    mgr,
		proj: prj,
	}

	ep, err := url.Parse("https://donotuse.example.com")
	assert.NilError(t, err)
	upCtx := &upbound.Context{
		Domain:           &url.URL{},
		RegistryEndpoint: ep,
	}

	err = c.Run(context.Background(), upCtx, upterm.NewNopTextPrinter())
	assert.NilError(t, err)
}

type mockSchemaRunner struct{}

func (m mockSchemaRunner) Generate(_ context.Context, fs afero.Fs, _ string, _ string, imageName string, _ []string, _ ...schemarunner.Option) error {
	// Simulate generation for KCL schema files
	if strings.Contains(imageName, "kcl") { // Check for KCL-specific marker, if any
		// Create the main KCL schema file
		kclOutputPath := "models/v1alpha1/platform_acme_co_v1alpha1_subnetwork.k"
		_ = fs.MkdirAll("models/v1alpha1/", os.ModePerm)
		if err := afero.WriteFile(fs, kclOutputPath, []byte("mock KCL content"), os.ModePerm); err != nil {
			return err
		}

		// Create the additional k8s folder and a file inside
		k8sOutputPath := "models/k8s/sample_k8s_resource.k"
		_ = fs.MkdirAll("models/k8s/", os.ModePerm)
		return afero.WriteFile(fs, k8sOutputPath, []byte("mock K8s content"), os.ModePerm)
	}
	// Simulate generation for Python schema files
	outputPath := "models/workdir/platform_acme_co_v1alpha1_subnetwork/io/k8s/apimachinery/pkg/apis/meta/v1.py"
	_ = fs.MkdirAll("models/workdir/platform_acme_co_v1alpha1_subnetwork/io/k8s/apimachinery/pkg/apis/meta/", os.ModePerm)
	return afero.WriteFile(fs, outputPath, []byte("mock Python content"), os.ModePerm)
}

type mockPusher struct {
	expectedTag name.Tag
	tag         name.Tag
}

func (m mockPusher) Push(_ context.Context, _ *v1alpha1.Project, imgMap project.ImageTagMap, _ ...project.PushOption) (name.Tag, error) {
	if _, ok := imgMap[m.expectedTag]; !ok {
		gotKeys := slices.Collect(maps.Keys(imgMap))
		return name.Tag{}, errors.Errorf("did not find image %q to push, got %v", m.expectedTag.String(), gotKeys)
	}

	return m.tag, nil
}
